{"version":3,"sources":["scm.js","adf-widget-scm.tpl.js","markdownPreview/markdownPreviewEdit.js","markdownPreview/markdownPreview.js","edit/simpleEditController.js","commits/commits.js","charts/commitsLastCommits.js","charts/commitsByMonth.js","charts/commitsByAuthor.js","activities/activities.js","service.js","adf-widget-scm.js"],"names":["angular","module","config","dashboardProvider","resolveRepository","SCM","result","repository","getRepository","category","edit","templateUrl","controller","controllerAs","resolve","repositories","getRepositories","widget","title","description","reload","commitsByAuthor","getCommitsByAuthor","commitsByMonth","getCommitsByMonth","commits","getCommits","activities","getActivities","fileContent","path","getFileContent","run","$templateCache","put","vm","this","getBranchesByRepositoryId","repositoryId","then","status","branches","branch","$sce","forEach","commit","trustAsHtml","gravatarHash","getGravatarHash","properties","$filter","chartData","chart","data","labels","series","class","options","scales","yAxes","id","display","position","ticks","fixedStepSize","scaleLabel","labelString","legend","responsive","date","Date","key","getUTCFullYear","getUTCMonth","getUTCDate","entry","count","push","reverse","month","value","author","createChart","activity","changeset","repoName","slice","$httpProvider","defaults","headers","common","factory","scmEndpoint","$http","request","url","get","response","error","limit","changesets","filePath","hash","i","length","window"],"mappings":"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","file":"adf-widget-scm.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm', ['adf.provider', 'chart.js', 'ngSanitize', 'btford.markdown'])\n  .config(function (dashboardProvider) {\n\n    // category for widget add dialog\n    var category = 'SCM-Manager';\n\n    var edit = {\n      templateUrl: '{widgetsPath}/scm/src/edit/edit.html',\n      controller: 'ScmEditController',\n      controllerAs: 'vm',\n      resolve: {\n        /** @ngInject **/\n        repositories: function (SCM) {\n          return SCM.getRepositories();\n        }\n      }\n    };\n\n    var resolveRepository = function (SCM, config) {\n      var result = null;\n      if (config.repository) {\n        result = SCM.getRepository(config.repository);\n      }\n      return result;\n    };\n\n    dashboardProvider\n      .widget('scm-commits-by-author', {\n        title: 'SCM Commits By Author',\n        description: 'Displays pie chart for commit count by author',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/pie-chart.html',\n        controller: 'CommitsByAuthorController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commitsByAuthor: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommitsByAuthor(config.repository);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits-by-month', {\n        title: 'SCM Commits By Month',\n        description: 'Displays line chart for commit count by month',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/line-chart.html',\n        controller: 'CommitsByMonthController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commitsByMonth: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommitsByMonth(config.repository);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits-last-commits', {\n        title: 'SCM Last Commit Chart',\n        description: 'Displays line chart for the last 50 commits',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/line-chart.html',\n        controller: 'LastCommitsController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commits: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommits(config.repository, 50);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits', {\n        title: 'SCM Commits',\n        description: 'Displays last commits',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/commits/view.html',\n        controller: 'CommitsController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commits: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommits(config.repository, 10);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n       .widget('scm-activities', {\n        title: 'SCM Activities',\n        description: 'SCM Activities for all repositories',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/activities/activityView.html',\n        controller: 'ActivitiesController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          activities: function(SCM){\n            var result = null;\n            result = SCM.getActivities();\n            return result;\n         }\n     }})\n      .widget('scm-markdown-content', {\n        title: 'SCM Markdown Content',\n        description: 'Displays a Markdown Content Preview',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/markdownPreview/view.html',\n        controller: 'MarkdownPreviewController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          fileContent: function (SCM, config) {\n            var result = null;\n            if (config.repository && config.path) {\n              result = SCM.getFileContent(config.repository, config.path);\n            }\n            return result;\n          }\n        },\n        edit: {\n          templateUrl: '{widgetsPath}/scm/src/markdownPreview/edit.html',\n          controller: 'MarkdownPreviewEditController',\n          controllerAs: 'vm',\n          resolve: {\n            /** @ngInject **/\n            repositories: function (SCM) {\n              return SCM.getRepositories();\n            }\n          }\n        }\n      });\n  });\n",null,"'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('MarkdownPreviewEditController', function (repositories, SCM) {\n    var vm = this;\n    vm.repositories = repositories;\n\n    vm.getBranchesByRepositoryId = function (repositoryId) {\n      if (repositoryId) {\n        SCM.getBranchesByRepositoryId(repositoryId).then(function (result) {\n          // catch repositories without branch support\n          if (result.status == 400)  {\n            vm.branches = null;\n          }else{\n            vm.branches = result.branch;\n          }\n        });\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('MarkdownPreviewController', function (repository, fileContent) {\n    var vm = this;\n    vm.repository = repository;\n    vm.fileContent = fileContent;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('ScmEditController', function(repositories){\n    var vm = this;\n\n    vm.repositories = repositories;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n        .controller('CommitsController', function ($sce, config, repository, commits, SCM) {\n            var vm = this;\n\n            vm.repository = repository;\n\n            // allow html descriptions\n            angular.forEach(commits, function (commit) {\n                commit.description = $sce.trustAsHtml(commit.description);\n            });\n            vm.commits = commits;\n\n            vm.gravatarHash = function (commit) {\n                return SCM.getGravatarHash(commit.properties);\n            };\n        });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('LastCommitsController', function ($filter, config, repository, commits) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (repository && commits) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var options = {\n        scales: {\n          yAxes: [\n            {\n              id: 'y-axis-1',\n              display: true,\n              position: 'left',\n              ticks: {fixedStepSize: 1},\n              scaleLabel: {\n                display: true,\n                labelString: 'Commits'\n              }\n            }\n          ]\n        },\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n      var chartData = [];\n      var chart = {\n        labels: [],\n        data: [chartData],\n        series: [\"Commits\"],\n        class: \"chart-line\",\n        options: options\n      };\n\n      var data = {};\n      angular.forEach(commits, function (commit) {\n        var date = new Date(commit.date);\n        var key = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate();\n        var entry = data[key];\n        if (entry) {\n          entry.count += 1;\n        } else {\n          data[key] = {\n            date: key,\n            count: 1\n          };\n        }\n      });\n\n      angular.forEach(data, function (entry) {\n        chart.labels.push(entry.date);\n        chartData.push(entry.count);\n      });\n\n      chart.labels.reverse();\n      chartData.reverse();\n\n      return chart;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('CommitsByMonthController', function (config, repository, commitsByMonth) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (commitsByMonth) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var chartData = [];\n      var options = {\n        scales: {\n          yAxes: [\n            {\n              id: 'y-axis-1',\n              display: true,\n              position: 'left',\n              ticks: {fixedStepSize: 1},\n              scaleLabel: {\n                display: true,\n                labelString: 'Commits'\n              }\n            }\n          ]\n        },\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n      var chart = {\n        labels: [],\n        data: [chartData],\n        series: [\"Commits\"],\n        class: \"chart-line\",\n        options: options\n      };\n\n      angular.forEach(commitsByMonth.month, function (month) {\n        chart.labels.push(month.value);\n        chartData.push(month.count);\n      });\n\n      return chart;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n  .controller('CommitsByAuthorController', function (config, repository, commitsByAuthor) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (repository && commitsByAuthor) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var data = {};\n\n      angular.forEach(commitsByAuthor.author, function (entry) {\n        var author = entry.value;\n        data[author] = entry.count;\n      });\n\n      var options = {\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n\n      var chart = {\n        labels: [],\n        data: [],\n        series: [\"Commits\"],\n        class: \"chart-pie\",\n        options: options\n      };\n\n      angular.forEach(data, function (count, author) {\n        chart.labels.push(author);\n        chart.data.push(count);\n      });\n\n      return chart;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.widget.scm')\n        .controller('ActivitiesController', function ($sce, activities, SCM) {\n            var vm = this;\n            vm.status = activities.status;\n\n            // allow html descriptions\n            angular.forEach(activities.activities, function (activity) {\n                activity.changeset.description = $sce.trustAsHtml(activity.changeset.description);\n                activity.repoName = activity[\"repository-name\"];\n            });\n\n            // handling and displaying only 15 activities\n            if (activities.activities) {\n                vm.activities = activities.activities.slice(0, 15);\n            }\n\n            vm.gravatarHash = function (activity) {\n                return SCM.getGravatarHash(activity.changeset.properties);\n            };\n        });","/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n\n/**\n * when enabling the dev_mode you have to hash youre username and pw with base64\n * \"user:pw\" --> hasehdPW213asd2\n * and set the constant DEV_BASIC64_AUTH with it. Make sure to NOT commit youre dev pw and set DEV_MODE to false\n * @type {boolean}\n */\nconst DEV_MODE = true; //TODO: wie kann ich vernünftig integrireren\nconst DEV_BASIC64_AUTH = ''\n\nangular.module('adf.widget.scm')\n  .config(function($httpProvider) {\n    if(DEV_MODE) {\n      $httpProvider.defaults.headers.common['Authorization'] = 'Basic ' + DEV_BASIC64_AUTH;\n    }\n  })\n  .factory('SCM', function (scmEndpoint, $http) {\n    function request(url) {\n      return $http.get(scmEndpoint + url).then(function (response) {\n        if (response.status == 200) {\n          return response.data;\n        }\n      }, function (error) {\n        return error;\n      });\n    }\n\n    function getRepositories() {\n      return request('repositories.json');\n    }\n\n    function getRepository(id) {\n      return request('repositories/' + id + '.json');\n    }\n\n    function getCommitsByAuthor(id) {\n      return request('plugins/statistic/' + id + '/commits-per-author.json');\n    }\n\n    function getCommitsByMonth(id) {\n      return request('plugins/statistic/' + id + '/commits-per-month.json');\n    }\n\n    function getCommits(id, limit) {\n      return request('repositories/' + id + '/changesets.json?limit=' + limit).then(function (data) {\n        return data.changesets;\n      });\n    }\n\n\n    function getActivities(){\n      return request('activity.json');\n  }\n\n    function getFileContent(id, filePath) {\n      return request('repositories/' + id + '/content?path=' + filePath);\n    }\n\n    function getBranchesByRepositoryId(id) {\n      return request('repositories/' + id + '/branches');\n    }\n\n    function getGravatarHash(properties) {\n        var hash;\n      if (properties){\n        for (var i=0; i<properties.length; i++){\n          if (properties[0].key === 'gravatar-hash'){\n               hash = properties[0].value;\n            break;\n          }\n        }\n      }\n      return hash;\n    }\n\n    return {\n      getRepositories: getRepositories,\n      getRepository: getRepository,\n      getCommitsByAuthor: getCommitsByAuthor,\n      getCommitsByMonth: getCommitsByMonth,\n      getCommits: getCommits,\n      getActivities: getActivities,\n      getFileContent: getFileContent,\n      getBranchesByRepositoryId: getBranchesByRepositoryId,\n      getGravatarHash: getGravatarHash\n    };\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm', ['adf.provider', 'chart.js', 'ngSanitize', 'btford.markdown'])\n  .config(function (dashboardProvider) {\n\n    // category for widget add dialog\n    var category = 'SCM-Manager';\n\n    var edit = {\n      templateUrl: '{widgetsPath}/scm/src/edit/edit.html',\n      controller: 'ScmEditController',\n      controllerAs: 'vm',\n      resolve: {\n        /** @ngInject **/\n        repositories: function (SCM) {\n          return SCM.getRepositories();\n        }\n      }\n    };\n\n    var resolveRepository = function (SCM, config) {\n      var result = null;\n      if (config.repository) {\n        result = SCM.getRepository(config.repository);\n      }\n      return result;\n    };\n\n    dashboardProvider\n      .widget('scm-commits-by-author', {\n        title: 'SCM Commits By Author',\n        description: 'Displays pie chart for commit count by author',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/pie-chart.html',\n        controller: 'CommitsByAuthorController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commitsByAuthor: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommitsByAuthor(config.repository);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits-by-month', {\n        title: 'SCM Commits By Month',\n        description: 'Displays line chart for commit count by month',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/line-chart.html',\n        controller: 'CommitsByMonthController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commitsByMonth: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommitsByMonth(config.repository);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits-last-commits', {\n        title: 'SCM Last Commit Chart',\n        description: 'Displays line chart for the last 50 commits',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/charts/line-chart.html',\n        controller: 'LastCommitsController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commits: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommits(config.repository, 50);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n      .widget('scm-commits', {\n        title: 'SCM Commits',\n        description: 'Displays last commits',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/commits/view.html',\n        controller: 'CommitsController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          commits: function (SCM, config) {\n            var result = null;\n            if (config.repository) {\n              result = SCM.getCommits(config.repository, 10);\n            }\n            return result;\n          }\n        },\n        edit: edit\n      })\n       .widget('scm-activities', {\n        title: 'SCM Activities',\n        description: 'SCM Activities for all repositories',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/activities/activityView.html',\n        controller: 'ActivitiesController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          activities: function(SCM){\n            var result = null;\n            result = SCM.getActivities();\n            return result;\n         }\n     }})\n      .widget('scm-markdown-content', {\n        title: 'SCM Markdown Content',\n        description: 'Displays a Markdown Content Preview',\n        category: category,\n        templateUrl: '{widgetsPath}/scm/src/markdownPreview/view.html',\n        controller: 'MarkdownPreviewController',\n        controllerAs: 'vm',\n        reload: true,\n        resolve: {\n          repository: resolveRepository,\n          fileContent: function (SCM, config) {\n            var result = null;\n            if (config.repository && config.path) {\n              result = SCM.getFileContent(config.repository, config.path);\n            }\n            return result;\n          }\n        },\n        edit: {\n          templateUrl: '{widgetsPath}/scm/src/markdownPreview/edit.html',\n          controller: 'MarkdownPreviewEditController',\n          controllerAs: 'vm',\n          resolve: {\n            /** @ngInject **/\n            repositories: function (SCM) {\n              return SCM.getRepositories();\n            }\n          }\n        }\n      });\n  });\n\nangular.module('adf.widget.scm').run(['$templateCache', function($templateCache) {$templateCache.put('{widgetsPath}/scm/src/activities/activityView.html','<div><div ng-if=!vm.activities class=\"alert alert-info\">There are no activities for your available repositories.</div><div ng-if=\"vm.status == 404 || vm.status == 500\" class=\"alert alert-danger\"><b>Error {{vm.status}}:</b> The endpoint could not be reached, this could mean that the activity plugin is not installed.</div><div ng-if=vm.activities><ul class=media-list><li class=media ng-repeat=\"activity in vm.activities\"><div ng-if=vm.gravatarHash(activity) class=media-left><img class=\"media-object img-thumbnail\" ng-src=\"https://www.gravatar.com/avatar/{{vm.gravatarHash(activity)}}?s=64&d=identicon\"></div><div class=media-body><b>{{activity.repoName}}</b><p ng-bind-html=activity.changeset.description></p><small>{{activity.changeset.author.name}}, {{activity.changeset.date | date: \\'yyyy-MM-dd HH:mm\\'}}</small></div></li></ul></div></div>');\n$templateCache.put('{widgetsPath}/scm/src/charts/line-chart.html','<div><div class=\"alert alert-info\" ng-if=!vm.chart>Please insert a repository path in the widget configuration</div><div ng-if=\"vm.repository.status == 404 || vm.repository.status == 500\" class=\"alert alert-danger\"><b>Error {{vm.repository.status}}</b> the endpoint could not be reached, this could mean that the selected repository does not exist or that the statistics plugin is not installed</div><div ng-if=vm.chart><canvas id=line class=\"chart chart-line\" chart-data=vm.chart.data chart-labels=vm.chart.labels chart-series=vm.chart.series chart-options=vm.chart.options></canvas></div></div>');\n$templateCache.put('{widgetsPath}/scm/src/charts/pie-chart.html','<div><div class=\"alert alert-info\" ng-if=!vm.chart>Please insert a repository path in the widget configuration</div><div ng-if=\"vm.repository.status == 404 || vm.repository.status == 500\" class=\"alert alert-danger\"><b>Error {{vm.repository.status}}</b> the endpoint could not be reached, this could mean that the selected repository does not exist or that the statistics plugin is not installed</div><div ng-if=vm.chart><canvas id=pie class=\"chart chart-pie\" chart-legend=true chart-data=vm.chart.data chart-labels=vm.chart.labels chart-options=vm.chart.options></canvas></div></div>');\n$templateCache.put('{widgetsPath}/scm/src/commits/view.html','<div><div ng-if=!config.repository class=\"alert alert-info\">Please configure a repository</div><div ng-if=\"vm.repository.status == 404 || vm.repository.status == 500\" class=\"alert alert-danger\"><b>Error {{vm.repository.status}}</b> the endpoint could not be reached, this could mean that the selected repository does not exist</div><div ng-if=config.repository><ul class=media-list><li class=media ng-repeat=\"commit in vm.commits\"><div ng-if=vm.gravatarHash(commit) class=media-left><img class=\"media-object img-thumbnail\" ng-src=\"https://www.gravatar.com/avatar/{{vm.gravatarHash(commit)}}?s=64&d=identicon\"></div><div class=media-body><p ng-bind-html=commit.description></p><small>{{commit.author.name}}, {{commit.date | date: \\'yyyy-MM-dd HH:mm\\'}}</small></div></li></ul></div></div>');\n$templateCache.put('{widgetsPath}/scm/src/edit/edit.html','<form role=form><div class=form-group><label for=repository>Repository</label><select name=repository id=repository class=form-control ng-model=config.repository><option ng-repeat=\"repository in vm.repositories | orderBy: \\'name\\'\" value={{repository.id}}>{{repository.name}}</option></select></div></form>');\n$templateCache.put('{widgetsPath}/scm/src/markdownPreview/edit.html','<form role=form><div class=form-group><p><label for=repository>Repository</label><select name=repository id=repository class=form-control ng-model=config.repository ng-init=vm.getBranchesByRepositoryId(config.repository) ng-change=vm.getBranchesByRepositoryId(config.repository)><option ng-repeat=\"repository in vm.repositories | orderBy: \\'name\\'\" value={{repository.id}}>{{repository.name}}</option></select></p><p ng-if=vm.branches><label for=branch>Branch</label><select name=branch id=branch class=form-control ng-model=config.branch><option ng-repeat=\"branch in vm.branches| orderBy: \\'name\\'\" value={{branch.id}}>{{branch.name}}</option></select></p><label for=path>Path to Markdown File</label> <input type=text class=form-control id=path ng-model=config.path></div></form>');\n$templateCache.put('{widgetsPath}/scm/src/markdownPreview/view.html','<style>\\n  div.markdownContent{\\n    overflow: auto;\\n    width: 100%;\\n  }\\n</style><div class=\"alert alert-info\" ng-if=!vm.fileContent>Please configure a specific file</div><div ng-if=vm.fileContent btf-markdown=vm.fileContent class=markdownContent></div><div class=\"alert alert-danger\" ng-if=\"vm.fileContent.status == 500 || vm.fileContent.status == 404\"><b>Error {{vm.fileContent.status}}</b> Markdown-File not found. Please check your configuration and try again.</div>');}]);\n\n\nangular.module('adf.widget.scm')\n  .controller('MarkdownPreviewEditController', function (repositories, SCM) {\n    var vm = this;\n    vm.repositories = repositories;\n\n    vm.getBranchesByRepositoryId = function (repositoryId) {\n      if (repositoryId) {\n        SCM.getBranchesByRepositoryId(repositoryId).then(function (result) {\n          // catch repositories without branch support\n          if (result.status == 400)  {\n            vm.branches = null;\n          }else{\n            vm.branches = result.branch;\n          }\n        });\n      }\n    };\n\n  });\n\n\n\nangular.module('adf.widget.scm')\n  .controller('MarkdownPreviewController', function (repository, fileContent) {\n    var vm = this;\n    vm.repository = repository;\n    vm.fileContent = fileContent;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n  .controller('ScmEditController', function(repositories){\n    var vm = this;\n\n    vm.repositories = repositories;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n        .controller('CommitsController', function ($sce, config, repository, commits, SCM) {\n            var vm = this;\n\n            vm.repository = repository;\n\n            // allow html descriptions\n            angular.forEach(commits, function (commit) {\n                commit.description = $sce.trustAsHtml(commit.description);\n            });\n            vm.commits = commits;\n\n            vm.gravatarHash = function (commit) {\n                return SCM.getGravatarHash(commit.properties);\n            };\n        });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n  .controller('LastCommitsController', function ($filter, config, repository, commits) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (repository && commits) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var options = {\n        scales: {\n          yAxes: [\n            {\n              id: 'y-axis-1',\n              display: true,\n              position: 'left',\n              ticks: {fixedStepSize: 1},\n              scaleLabel: {\n                display: true,\n                labelString: 'Commits'\n              }\n            }\n          ]\n        },\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n      var chartData = [];\n      var chart = {\n        labels: [],\n        data: [chartData],\n        series: [\"Commits\"],\n        class: \"chart-line\",\n        options: options\n      };\n\n      var data = {};\n      angular.forEach(commits, function (commit) {\n        var date = new Date(commit.date);\n        var key = date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate();\n        var entry = data[key];\n        if (entry) {\n          entry.count += 1;\n        } else {\n          data[key] = {\n            date: key,\n            count: 1\n          };\n        }\n      });\n\n      angular.forEach(data, function (entry) {\n        chart.labels.push(entry.date);\n        chartData.push(entry.count);\n      });\n\n      chart.labels.reverse();\n      chartData.reverse();\n\n      return chart;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n  .controller('CommitsByMonthController', function (config, repository, commitsByMonth) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (commitsByMonth) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var chartData = [];\n      var options = {\n        scales: {\n          yAxes: [\n            {\n              id: 'y-axis-1',\n              display: true,\n              position: 'left',\n              ticks: {fixedStepSize: 1},\n              scaleLabel: {\n                display: true,\n                labelString: 'Commits'\n              }\n            }\n          ]\n        },\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n      var chart = {\n        labels: [],\n        data: [chartData],\n        series: [\"Commits\"],\n        class: \"chart-line\",\n        options: options\n      };\n\n      angular.forEach(commitsByMonth.month, function (month) {\n        chart.labels.push(month.value);\n        chartData.push(month.count);\n      });\n\n      return chart;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n  .controller('CommitsByAuthorController', function (config, repository, commitsByAuthor) {\n    var vm = this;\n    vm.repository = repository;\n\n    if (repository && commitsByAuthor) {\n      vm.chart = createChart();\n    }\n\n    function createChart() {\n      var data = {};\n\n      angular.forEach(commitsByAuthor.author, function (entry) {\n        var author = entry.value;\n        data[author] = entry.count;\n      });\n\n      var options = {\n        legend: {\n          display: true,\n          position: \"bottom\"\n        },\n        responsive: true\n      };\n\n      var chart = {\n        labels: [],\n        data: [],\n        series: [\"Commits\"],\n        class: \"chart-pie\",\n        options: options\n      };\n\n      angular.forEach(data, function (count, author) {\n        chart.labels.push(author);\n        chart.data.push(count);\n      });\n\n      return chart;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.widget.scm')\n        .controller('ActivitiesController', function ($sce, activities, SCM) {\n            var vm = this;\n            vm.status = activities.status;\n\n            // allow html descriptions\n            angular.forEach(activities.activities, function (activity) {\n                activity.changeset.description = $sce.trustAsHtml(activity.changeset.description);\n                activity.repoName = activity[\"repository-name\"];\n            });\n\n            // handling and displaying only 15 activities\n            if (activities.activities) {\n                vm.activities = activities.activities.slice(0, 15);\n            }\n\n            vm.gravatarHash = function (activity) {\n                return SCM.getGravatarHash(activity.changeset.properties);\n            };\n        });\n/*\n * The MIT License\n *\n * Copyright (c) 2016, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n\n/**\n * when enabling the dev_mode you have to hash youre username and pw with base64\n * \"user:pw\" --> hasehdPW213asd2\n * and set the constant DEV_BASIC64_AUTH with it. Make sure to NOT commit youre dev pw and set DEV_MODE to false\n * @type {boolean}\n */\nconst DEV_MODE = true; //TODO: wie kann ich vernünftig integrireren\nconst DEV_BASIC64_AUTH = ''\n\nangular.module('adf.widget.scm')\n  .config(function($httpProvider) {\n    if(DEV_MODE) {\n      $httpProvider.defaults.headers.common['Authorization'] = 'Basic ' + DEV_BASIC64_AUTH;\n    }\n  })\n  .factory('SCM', function (scmEndpoint, $http) {\n    function request(url) {\n      return $http.get(scmEndpoint + url).then(function (response) {\n        if (response.status == 200) {\n          return response.data;\n        }\n      }, function (error) {\n        return error;\n      });\n    }\n\n    function getRepositories() {\n      return request('repositories.json');\n    }\n\n    function getRepository(id) {\n      return request('repositories/' + id + '.json');\n    }\n\n    function getCommitsByAuthor(id) {\n      return request('plugins/statistic/' + id + '/commits-per-author.json');\n    }\n\n    function getCommitsByMonth(id) {\n      return request('plugins/statistic/' + id + '/commits-per-month.json');\n    }\n\n    function getCommits(id, limit) {\n      return request('repositories/' + id + '/changesets.json?limit=' + limit).then(function (data) {\n        return data.changesets;\n      });\n    }\n\n\n    function getActivities(){\n      return request('activity.json');\n  }\n\n    function getFileContent(id, filePath) {\n      return request('repositories/' + id + '/content?path=' + filePath);\n    }\n\n    function getBranchesByRepositoryId(id) {\n      return request('repositories/' + id + '/branches');\n    }\n\n    function getGravatarHash(properties) {\n        var hash;\n      if (properties){\n        for (var i=0; i<properties.length; i++){\n          if (properties[0].key === 'gravatar-hash'){\n               hash = properties[0].value;\n            break;\n          }\n        }\n      }\n      return hash;\n    }\n\n    return {\n      getRepositories: getRepositories,\n      getRepository: getRepository,\n      getCommitsByAuthor: getCommitsByAuthor,\n      getCommitsByMonth: getCommitsByMonth,\n      getCommits: getCommits,\n      getActivities: getActivities,\n      getFileContent: getFileContent,\n      getBranchesByRepositoryId: getBranchesByRepositoryId,\n      getGravatarHash: getGravatarHash\n    };\n  });\n})(window);"]}